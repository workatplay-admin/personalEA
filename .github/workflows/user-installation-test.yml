name: User Installation Sanity Test (Version [1;33m‚ö†Ô∏è No Git tags found, using default version: v1.0.0[0mv1.0.0)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'docker-compose.user.yml'
      - 'Dockerfile.user'
      - '.env.user.example'
      - 'scripts/bootstrap.sh'
      - 'scripts/setup-user.sh'
      - 'docs/user-installation-guide.md'
      - 'services/**'
      - 'shared/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.user.yml'
      - 'Dockerfile.user'
      - '.env.user.example'
      - 'scripts/bootstrap.sh'
      - 'scripts/setup-user.sh'
      - 'docs/user-installation-guide.md'
      - 'services/**'
      - 'shared/**'

jobs:
  user-installation-test:
    name: Test User Installation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create user environment file
      run: |
        cp .env.user.example .env.user
        # Set secure test values
        sed -i 's/your-super-secret-jwt-key-change-this/test-jwt-secret-key-for-ci-only-not-secure/' .env.user
        sed -i 's/your-super-secret-session-key-change-this/test-session-secret-key-for-ci-only-not-secure/' .env.user
        sed -i 's/your-32-char-encryption-key-here/test-encryption-key-32-chars-long/' .env.user
        sed -i 's/personalea/test_password/' .env.user

    - name: Start PersonalEA user services
      run: |
        echo "üöÄ Starting PersonalEA user installation test..."
        docker-compose -f docker-compose.user.yml up -d --build
        echo "‚úÖ Services started"

    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to initialize..."
        sleep 60
        echo "‚úÖ Initial wait complete"

    - name: Check service health
      run: |
        echo "üîç Checking service health endpoints..."
        
        # Function to check health with retries
        check_health() {
          local service_name=$1
          local health_url=$2
          local max_attempts=10
          local attempt=1
          
          echo "Checking $service_name health at $health_url"
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts for $service_name"
            
            if curl -f -s --max-time 10 "$health_url" > /dev/null; then
              echo "‚úÖ $service_name is healthy"
              return 0
            fi
            
            echo "‚è≥ $service_name not ready yet, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå $service_name failed health check after $max_attempts attempts"
          return 1
        }
        
        # Check main web interface
        check_health "PersonalEA Web" "http://localhost:3000/health"
        
        # Check configuration UI
        check_health "Configuration UI" "http://localhost:3001/health"

    - name: Test API endpoints
      run: |
        echo "üß™ Testing API endpoints..."
        
        # Test main health endpoint
        echo "Testing main health endpoint..."
        response=$(curl -s http://localhost:3000/health)
        echo "Health response: $response"
        
        if echo "$response" | grep -q "status.*ok\|healthy"; then
          echo "‚úÖ Main health endpoint working"
        else
          echo "‚ùå Main health endpoint failed"
          exit 1
        fi
        
        # Test configuration UI health
        echo "Testing configuration UI health..."
        config_response=$(curl -s http://localhost:3001/health)
        echo "Config health response: $config_response"
        
        if echo "$config_response" | grep -q "status.*ok\|healthy"; then
          echo "‚úÖ Configuration UI health endpoint working"
        else
          echo "‚ùå Configuration UI health endpoint failed"
          exit 1
        fi

    - name: Test database connectivity
      run: |
        echo "üóÑÔ∏è Testing database connectivity..."
        
        # Check if PostgreSQL is accessible
        if docker-compose -f docker-compose.user.yml exec -T db pg_isready -U personalea -d personalea; then
          echo "‚úÖ Database is accessible"
        else
          echo "‚ùå Database connectivity failed"
          exit 1
        fi

    - name: Test Redis connectivity
      run: |
        echo "üî¥ Testing Redis connectivity..."
        
        # Check if Redis is accessible
        if docker-compose -f docker-compose.user.yml exec -T redis redis-cli ping | grep -q "PONG"; then
          echo "‚úÖ Redis is accessible"
        else
          echo "‚ùå Redis connectivity failed"
          exit 1
        fi

    - name: Verify service logs for errors
      run: |
        echo "üìã Checking service logs for critical errors..."
        
        # Get logs and check for critical errors
        logs=$(docker-compose -f docker-compose.user.yml logs --tail=50)
        
        # Check for critical error patterns
        if echo "$logs" | grep -i "error\|exception\|failed\|fatal" | grep -v "health\|test\|debug"; then
          echo "‚ö†Ô∏è Found potential errors in logs:"
          echo "$logs" | grep -i "error\|exception\|failed\|fatal" | grep -v "health\|test\|debug"
          echo "Full logs for debugging:"
          echo "$logs"
          # Don't fail on warnings, just report them
        else
          echo "‚úÖ No critical errors found in logs"
        fi

    - name: Test user workflow simulation
      run: |
        echo "üë§ Simulating basic user workflow..."
        
        # Test if main page loads
        if curl -s http://localhost:3000 | grep -q "PersonalEA\|Welcome\|Setup"; then
          echo "‚úÖ Main page loads successfully"
        else
          echo "‚ùå Main page failed to load"
          exit 1
        fi
        
        # Test if configuration page loads
        if curl -s http://localhost:3001 | grep -q "Configuration\|Settings\|Setup"; then
          echo "‚úÖ Configuration page loads successfully"
        else
          echo "‚ùå Configuration page failed to load"
          exit 1
        fi

    - name: Performance check
      run: |
        echo "‚ö° Running basic performance checks..."
        
        # Check response times
        start_time=$(date +%s%N)
        curl -s http://localhost:3000/health > /dev/null
        end_time=$(date +%s%N)
        response_time=$(( (end_time - start_time) / 1000000 ))
        
        echo "Health endpoint response time: ${response_time}ms"
        
        if [ $response_time -lt 5000 ]; then
          echo "‚úÖ Response time acceptable (< 5s)"
        else
          echo "‚ö†Ô∏è Response time slow (> 5s): ${response_time}ms"
        fi

    - name: Cleanup test
      run: |
        echo "üßπ Testing graceful shutdown..."
        docker-compose -f docker-compose.user.yml down
        echo "‚úÖ Services stopped gracefully"

    - name: Show logs on failure
      if: failure()
      run: |
        echo "‚ùå Test failed! Showing service logs for debugging:"
        echo "=== Docker Compose Services ==="
        docker-compose -f docker-compose.user.yml ps
        echo "=== Service Logs ==="
        docker-compose -f docker-compose.user.yml logs
        echo "=== System Resources ==="
        df -h
        free -h

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "üßπ Cleaning up after failure..."
        docker-compose -f docker-compose.user.yml down -v
        docker system prune -f

  bootstrap-script-test:
    name: Test Bootstrap Script
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test bootstrap script syntax
      run: |
        echo "üîç Testing bootstrap script syntax..."
        bash -n scripts/bootstrap.sh
        echo "‚úÖ Bootstrap script syntax is valid"

    - name: Test setup script syntax
      run: |
        echo "üîç Testing setup script syntax..."
        bash -n scripts/setup-user.sh
        echo "‚úÖ Setup script syntax is valid"

    - name: Test bootstrap script dry run
      run: |
        echo "üß™ Testing bootstrap script (dry run mode)..."
        
        # Create a test version that doesn't actually install
        cp scripts/bootstrap.sh test-bootstrap.sh
        
        # Modify script to exit before actual installation
        sed -i '/git clone/i echo "DRY RUN: Would clone repository"; exit 0' test-bootstrap.sh
        
        # Run the test
        bash test-bootstrap.sh
        echo "‚úÖ Bootstrap script dry run completed"

  documentation-validation:
    name: Validate Installation Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation links
      run: |
        echo "üîó Validating documentation links..."
        
        # Check if all referenced files exist
        files_to_check=(
          "docs/user-installation-guide.md"
          "docs/configuration-management-plan.md"
          "docs/faq.md"
          "scripts/bootstrap.sh"
          "scripts/setup-user.sh"
          "docker-compose.user.yml"
          ".env.user.example"
          "Dockerfile.user"
        )
        
        for file in "${files_to_check[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file is missing"
            exit 1
          fi
        done

    - name: Validate bootstrap URL in documentation
      run: |
        echo "üîç Checking bootstrap URL in documentation..."
        
        # Check if the bootstrap URL is correctly referenced
        if grep -q "scripts/bootstrap.sh" docs/user-installation-guide.md; then
          echo "‚úÖ Bootstrap script URL found in installation guide"
        else
          echo "‚ùå Bootstrap script URL missing from installation guide"
          exit 1
        fi
        
        if grep -q "scripts/bootstrap.sh" README.md; then
          echo "‚úÖ Bootstrap script URL found in README"
        else
          echo "‚ùå Bootstrap script URL missing from README"
          exit 1
        fi

    - name: Check TL;DR section exists
      run: |
        echo "üìã Checking TL;DR section..."
        
        if grep -q "TL;DR" docs/user-installation-guide.md; then
          echo "‚úÖ TL;DR section found in installation guide"
        else
          echo "‚ùå TL;DR section missing from installation guide"
          exit 1
        fi