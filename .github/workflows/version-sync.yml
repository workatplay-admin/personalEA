name: Version Sync

on:
  push:
    tags:
      - 'v*'

jobs:
  update-versions:
    name: Update Version Tags in Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Get version information
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        echo "Latest tag: $LATEST_TAG"
        echo "Commit hash: $COMMIT_HASH"
    
    - name: Update version placeholders
      run: |
        echo "Updating version placeholders..."
        
        # Make update script executable
        chmod +x scripts/update-version-tags.sh
        
        # Run the version updater
        ./scripts/update-version-tags.sh
        
        echo "Version update complete"
    
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff --name-only
        fi
    
    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add -A
        git commit -m "chore: update version references to ${{ steps.version.outputs.version }}

        - Updated documentation to reference version ${{ steps.version.outputs.version }}
        - Updated Docker image tags and download URLs
        - Synchronized version placeholders across all files
        
        Auto-generated by version-sync workflow"
        
        git push origin HEAD:main
    
    - name: Create release notes
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ steps.version.outputs.version }}';
          const commitHash = '${{ steps.version.outputs.commit_hash }}';
          
          const releaseNotes = `
          ## PersonalEA ${tag}
          
          ### ðŸ“¦ Installation
          
          **One-command installation:**
          \`\`\`bash
          curl -sL https://raw.githubusercontent.com/workatplay-admin/personalEA/${tag}/scripts/bootstrap.sh | bash
          \`\`\`
          
          ### ðŸ”„ Version Sync
          
          This release includes automatic version synchronization:
          - All documentation now references version ${tag}
          - Docker images tagged with ${tag}
          - Download URLs point to stable ${tag} release
          - CI/CD pipelines updated for version ${tag}
          
          ### ðŸ“‹ What's Included
          
          - âœ… User-friendly installation system
          - âœ… Automated setup scripts
          - âœ… Docker containerization
          - âœ… Health monitoring
          - âœ… Configuration management
          - âœ… Version-aligned documentation
          
          ### ðŸš€ Quick Start
          
          1. Run the one-command installer above
          2. Open http://localhost:3000 when ready
          3. Follow the setup wizard
          4. Start using your personal AI assistant!
          
          ### ðŸ“– Documentation
          
          - [User Installation Guide](https://github.com/workatplay-admin/personalEA/blob/${tag}/docs/user-installation-guide.md)
          - [Configuration Management](https://github.com/workatplay-admin/personalEA/blob/${tag}/docs/configuration-management-plan.md)
          - [FAQ](https://github.com/workatplay-admin/personalEA/blob/${tag}/docs/faq.md)
          
          Built from commit: ${commitHash}
          `;
          
          // Update the release with the generated notes
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              body: releaseNotes
            });
            
            console.log('Release notes updated successfully');
          } catch (error) {
            console.log('Release not found, creating new release...');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `PersonalEA ${tag}`,
              body: releaseNotes,
              draft: false,
              prerelease: tag.includes('-')
            });
            
            console.log('New release created successfully');
          }