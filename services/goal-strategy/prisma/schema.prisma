// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Goal Management
model Goal {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String?
  rawGoal           String?  // Original user input before SMART translation
  smartCriteria     Json     // SMART criteria breakdown
  status            GoalStatus @default(DRAFT)
  priority          Priority @default(MEDIUM)
  category          String?
  tags              String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  targetDate        DateTime?
  completedAt       DateTime?

  // Relationships
  metrics           GoalMetric[]
  milestones        Milestone[]
  clarifications    GoalClarification[]

  @@map("goals")
}

model GoalMetric {
  id                  String   @id @default(cuid())
  goalId              String
  name                String
  type                MetricType
  targetValue         Float
  currentValue        Float    @default(0)
  baselineValue       Float?
  unit                String?
  measurementFrequency String? // daily, weekly, monthly, etc.
  isPrimary           Boolean  @default(false) // Critical success metric
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  goal                Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_metrics")
}

model GoalClarification {
  id                String   @id @default(cuid())
  goalId            String
  question          String
  answer            String?
  smartCriterion    String   // Which SMART criterion this clarifies
  status            ClarificationStatus @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  goal              Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_clarifications")
}

// Milestone Management
model Milestone {
  id                String   @id @default(cuid())
  goalId            String
  title             String
  description       String?
  targetDate        DateTime
  completionCriteria String
  status            MilestoneStatus @default(NOT_STARTED)
  orderIndex        Int
  progressPercentage Float   @default(0)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  completedAt       DateTime?

  // Relationships
  goal              Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  tasks             Task[]
  progress          MilestoneProgress[]

  @@map("milestones")
}

model MilestoneProgress {
  id                String   @id @default(cuid())
  milestoneId       String
  progressPercentage Float
  notes             String?
  recordedAt        DateTime @default(now())
  recordedBy        String

  // Relationships
  milestone         Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("milestone_progress")
}

// Work Breakdown Structure and Task Management
model Task {
  id                String   @id @default(cuid())
  milestoneId       String
  parentTaskId      String?  // For hierarchical task breakdown
  title             String
  description       String?
  completionCriteria String?
  estimatedHours    Float?
  actualHours       Float?
  status            TaskStatus @default(NOT_STARTED)
  priority          Priority @default(MEDIUM)
  assignedTo        String?
  tags              String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  startedAt         DateTime?
  completedAt       DateTime?

  // Relationships
  milestone         Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  parentTask        Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks          Task[]   @relation("TaskHierarchy")
  predecessors      TaskDependency[] @relation("PredecessorTasks")
  successors        TaskDependency[] @relation("SuccessorTasks")
  estimates         TaskEstimate[]
  schedules         TaskSchedule[]

  @@map("tasks")
}

model TaskDependency {
  id                String   @id @default(cuid())
  predecessorTaskId String
  successorTaskId   String
  dependencyType    DependencyType @default(FINISH_TO_START)
  lagTime           Int      @default(0) // in hours
  createdAt         DateTime @default(now())

  // Relationships
  predecessorTask   Task     @relation("PredecessorTasks", fields: [predecessorTaskId], references: [id], onDelete: Cascade)
  successorTask     Task     @relation("SuccessorTasks", fields: [successorTaskId], references: [id], onDelete: Cascade)

  @@unique([predecessorTaskId, successorTaskId])
  @@map("task_dependencies")
}

// Estimation Engine
model TaskEstimate {
  id                String   @id @default(cuid())
  taskId            String
  estimationMethod  EstimationMethod
  estimatedHours    Float
  optimisticHours   Float?   // For PERT estimation
  pessimisticHours  Float?   // For PERT estimation
  mostLikelyHours   Float?   // For PERT estimation
  confidenceScore   Float?   // 0-1 confidence in estimate
  rationale         String?
  estimatedBy       String
  createdAt         DateTime @default(now())

  // Relationships
  task              Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_estimates")
}

model SimilarTask {
  id                String   @id @default(cuid())
  taskId            String
  similarTaskId     String
  similarityScore   Float    // 0-1 similarity score
  adjustmentFactors Json     // Factors that make tasks different
  createdAt         DateTime @default(now())

  @@map("similar_tasks")
}

model EstimationHistory {
  id                String   @id @default(cuid())
  taskId            String
  estimationMethod  EstimationMethod
  estimatedHours    Float
  actualHours       Float
  accuracyScore     Float    // How accurate the estimate was
  createdAt         DateTime @default(now())

  @@map("estimation_history")
}

// Calendar Integration and Scheduling
model TaskSchedule {
  id                String   @id @default(cuid())
  taskId            String
  startTime         DateTime
  endTime           DateTime
  calendarEventId   String?  // External calendar event ID
  isFocusTime       Boolean  @default(false)
  isBuffer          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  task              Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_schedules")
}

// Capacity Management
model TeamCapacity {
  id                    String   @id @default(cuid())
  userId                String   @unique
  availableHoursPerWeek Float    @default(40)
  weekendPreference     WeekendPreference @default(NO_WEEKENDS)
  focusTimePreferences  Json     // Preferred time blocks for deep work
  skillTags             String[] // Skills/expertise areas
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("team_capacity")
}

model CapacityAllocation {
  id                String   @id @default(cuid())
  userId            String
  taskId            String?
  milestoneId       String?
  goalId            String?
  allocatedHours    Float
  weekStartDate     DateTime // Week this allocation applies to
  utilizationRate   Float    // Percentage of capacity used
  createdAt         DateTime @default(now())

  @@map("capacity_allocations")
}

// Learning and Analytics
model GoalTemplate {
  id                String   @id @default(cuid())
  name              String
  description       String?
  category          String
  smartTemplate     Json     // Template for SMART criteria
  milestoneTemplate Json     // Template for milestone breakdown
  taskTemplate      Json     // Template for common tasks
  usageCount        Int      @default(0)
  successRate       Float?   // Percentage of goals using this template that succeed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("goal_templates")
}

model WorkflowPattern {
  id                String   @id @default(cuid())
  name              String
  description       String?
  pattern           Json     // The workflow pattern data
  category          String
  usageCount        Int      @default(0)
  successRate       Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("workflow_patterns")
}

// Enums
enum GoalStatus {
  DRAFT
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MetricType {
  NUMERIC
  PERCENTAGE
  BOOLEAN
  CURRENCY
  COUNT
}

enum ClarificationStatus {
  PENDING
  ANSWERED
  SKIPPED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum EstimationMethod {
  EXPERT_JUDGMENT
  ANALOGY_BASED
  THREE_POINT_PERT
  HISTORICAL_DATA
}

enum WeekendPreference {
  NO_WEEKENDS
  LIGHT_WEEKENDS
  FULL_WEEKENDS
}