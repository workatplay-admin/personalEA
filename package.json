{
  "name": "personal-ea",
  "version": "1.0.0",
  "description": "Personal AI Assistant System - API-first microservices architecture",
  "private": true,
  "scripts": {
    "lint:api": "spectral lint docs/**/*-api-*.yaml --ruleset docs/.spectral.yaml",
    "lint:api:fix": "spectral lint docs/**/*-api-*.yaml --ruleset docs/.spectral.yaml --format=pretty",
    "validate:api": "npm run lint:api && echo 'All API specifications are valid'",
    "mock:email": "npx prism mock docs/email-service-api-v1.yaml --port 8083 --host 127.0.0.1 --dynamic --cors",
    "mock:goals": "npx prism mock docs/goal-strategy-service-api-v1.yaml --port 8085 --host 127.0.0.1 --dynamic --cors",
    "mock:calendar": "npx prism mock docs/calendar-service-api-v1.yaml --port 8086 --host 127.0.0.1 --dynamic --cors",
    "mock:all": "concurrently \"npm run mock:email\" \"npm run mock:goals\" \"npm run mock:calendar\"",
    "mock:docker": "docker-compose -f docker-compose.mock.yml up -d",
    "mock:docker:stop": "docker-compose -f docker-compose.mock.yml down",
    "mock:docker:logs": "docker-compose -f docker-compose.mock.yml logs -f",
    "mock:docker:rebuild": "docker-compose -f docker-compose.mock.yml down && docker-compose -f docker-compose.mock.yml up -d --build",
    "mock:status": "curl -s http://localhost:8083/v1/health && curl -s http://localhost:8085/v1/health && curl -s http://localhost:8086/v1/health",
    "docs:serve": "npx @redocly/cli preview-docs docs/email-service-api-v1.yaml --port 8080",
    "docs:build": "npx @redocly/cli build-docs docs/email-service-api-v1.yaml --output docs/email-service-docs.html && npx @redocly/cli build-docs docs/goal-strategy-service-api-v1.yaml --output docs/goal-strategy-docs.html && npx @redocly/cli build-docs docs/calendar-service-api-v1.yaml --output docs/calendar-service-docs.html",
    "generate:types": "openapi-typescript docs/email-service-api-v1.yaml --output types/email-service.ts && openapi-typescript docs/goal-strategy-service-api-v1.yaml --output types/goal-strategy.ts && openapi-typescript docs/calendar-service-api-v1.yaml --output types/calendar.ts",
    "test:contract": "npm run test:contract:api && npm run test:contract:pact",
    "test:contract:api": "npm run test:contract:schemathesis && npm run test:contract:dredd",
    "test:contract:schemathesis": "schemathesis run docs/email-service-api-v1.yaml --url http://localhost:8083 --max-examples=50 && schemathesis run docs/goal-strategy-service-api-v1.yaml --url http://localhost:8085 --max-examples=50 && schemathesis run docs/calendar-service-api-v1.yaml --url http://localhost:8086 --max-examples=50",
    "test:contract:dredd": "dredd docs/email-service-api-v1.yaml http://localhost:8083 && dredd docs/goal-strategy-service-api-v1.yaml http://localhost:8085 && dredd docs/calendar-service-api-v1.yaml http://localhost:8086",
    "test:contract:pact": "npm run test:contract:pact:provider && npm run test:contract:pact:consumer",
    "test:contract:pact:provider": "jest --testPathPattern=tests/pact/provider",
    "test:contract:pact:consumer": "jest --testPathPattern=tests/pact/consumer",
    "test:contract:mock": "npm run mock:all & sleep 5 && npm run test:contract:api; kill %1",
    "test:user-install": "npm run test:user-install:setup && npm run test:user-install:health && npm run test:user-install:cleanup",
    "test:user-install:setup": "cp .env.user.example .env.user && sed -i 's/your-super-secret-jwt-key-change-this/test-jwt-secret-key-for-ci-only/' .env.user && sed -i 's/your-super-secret-session-key-change-this/test-session-secret-key-for-ci-only/' .env.user && sed -i 's/your-32-char-encryption-key-here/test-encryption-key-32-chars-long/' .env.user && docker-compose -f docker-compose.user.yml up -d --build",
    "test:user-install:health": "sleep 60 && curl -f http://localhost:3000/health && curl -f http://localhost:3001/health",
    "test:user-install:cleanup": "docker-compose -f docker-compose.user.yml down -v",
    "test:bootstrap": "bash -n scripts/bootstrap.sh && bash -n scripts/setup-user.sh",
    "prepare": "husky install",
    "precommit": "npm run validate:api",
    "ci:validate": "npm run lint:api && npm run docs:build && echo 'CI validation completed successfully'",
    "ci:setup": "npm ci && npm run ci:validate",
    "ci:test-user-install": "npm run test:user-install",
    "update-versions": "chmod +x scripts/update-version-tags.sh && ./scripts/update-version-tags.sh",
    "version:check": "git describe --tags --abbrev=0 2>/dev/null || echo 'v1.0.0'",
    "version:update": "npm run update-versions"
  },
  "devDependencies": {
    "@stoplight/spectral-cli": "^6.11.0",
    "@stoplight/prism-cli": "^5.8.0",
    "redoc-cli": "^0.13.21",
    "openapi-typescript": "^6.7.1",
    "concurrently": "^8.2.2",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "dredd": "^14.1.0",
    "@pact-foundation/pact": "^12.1.0",
    "@pact-foundation/pact-node": "^10.17.7",
    "jest": "^29.7.0",
    "@types/jest": "^29.5.8",
    "ts-jest": "^29.1.1",
    "axios": "^1.6.2",
    "supertest": "^6.3.3"
  },
  "lint-staged": {
    "docs/**/*-api-*.yaml": [
      "spectral lint --ruleset docs/.spectral.yaml"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "api",
    "microservices",
    "openapi",
    "personal-assistant",
    "ai"
  ],
  "author": "PersonalEA Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "workspaces": [
    "services/*"
  ]
}